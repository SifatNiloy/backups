package org.cloudbus.cloudsim.examples;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class VmScheduleComparison {

    public static void main(String[] args) {

        try {
            // Step 1: Initialize CloudSim
            int numUsers = 1;
            Calendar calendar = Calendar.getInstance();
            boolean traceFlag = false;
            CloudSim.init(numUsers, calendar, traceFlag);

            // Step 2: Create Datacenter
            Datacenter datacenter = createDatacenter("Datacenter_0");

            // Step 3: Create Broker
            DatacenterBroker broker = new DatacenterBroker("Broker");
            int brokerId = broker.getId();

            // Step 4: Create VMs (1 with TimeShared, 1 with SpaceShared)
            List<Vm> vmList = new ArrayList<>();

            // VM with TimeShared scheduler
            Vm vm1 = new Vm(0, brokerId, 1000, 1, 2048, 1000, 10000, "Xen", new CloudletSchedulerTimeShared());
            // VM with SpaceShared scheduler
            Vm vm2 = new Vm(1, brokerId, 1000, 1, 2048, 1000, 10000, "Xen", new CloudletSchedulerSpaceShared());

            vmList.add(vm1);
            vmList.add(vm2);
            broker.submitVmList(vmList);

            // Step 5: Create Cloudlets
            List<Cloudlet> cloudletList = new ArrayList<>();
            long length = 40000;
            int pesNumber = 1;
            long fileSize = 300;
            long outputSize = 300;
            UtilizationModel utilizationModel = new UtilizationModelFull();

            for (int i = 0; i < 4; i++) {
                Cloudlet cloudlet = new Cloudlet(i, length, pesNumber, fileSize, outputSize, utilizationModel, utilizationModel, utilizationModel);
                cloudlet.setUserId(brokerId);
                // Assign cloudlets: first 2 to vm1 (TimeShared), next 2 to vm2 (SpaceShared)
                cloudlet.setVmId(i < 2 ? vm1.getId() : vm2.getId());
                cloudletList.add(cloudlet);
            }

            broker.submitCloudletList(cloudletList);

            // Step 6: Start simulation
            CloudSim.startSimulation();

            // Step 7: Stop simulation
            List<Cloudlet> newList = broker.getCloudletReceivedList();
            CloudSim.stopSimulation();

            // Step 8: Print results
            printCloudletList(newList);

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("An error occurred.");
        }
    }

    private static Datacenter createDatacenter(String name) throws Exception {
        List<Host> hostList = new ArrayList<>();

        List<Pe> peList = new ArrayList<>();
        peList.add(new Pe(0, new PeProvisionerSimple(1000)));

        int ram = 8192; // host memory (MB)
        long storage = 1000000; // host storage
        int bw = 10000;

        Host host = new Host(0, new RamProvisionerSimple(ram),
                new BwProvisionerSimple(bw), storage, peList,
                new VmSchedulerTimeShared(peList));

        hostList.add(host);

        String arch = "x86";
        String os = "Linux";
        String vmm = "Xen";
        double time_zone = 10.0;
        double cost = 3.0;
        double costPerMem = 0.05;
        double costPerStorage = 0.001;
        double costPerBw = 0.0;

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                arch, os, vmm, hostList, time_zone, cost, costPerMem,
                costPerStorage, costPerBw);

        return new Datacenter(name, characteristics,
                new VmAllocationPolicySimple(hostList), new ArrayList<Storage>(), 0);
    }

    private static void printCloudletList(List<Cloudlet> list) {
        String indent = "    ";
        System.out.println();
        System.out.println("========== OUTPUT ==========");
        System.out.println("Cloudlet ID" + indent + "STATUS" + indent +
                "Data center ID" + indent + "VM ID" + indent + "Time" + indent + "Start Time" + indent + "Finish Time");

        for (Cloudlet cloudlet : list) {
            if (cloudlet.getStatus() == Cloudlet.SUCCESS) {
                System.out.println(cloudlet.getCloudletId() + indent + indent + "SUCCESS" +
                        indent + indent + cloudlet.getResourceId() +
                        indent + indent + cloudlet.getVmId() +
                        indent + indent + cloudlet.getActualCPUTime() +
                        indent + indent + cloudlet.getExecStartTime() +
                        indent + indent + cloudlet.getFinishTime());
            }
        }
    }
}
