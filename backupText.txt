package org.cloudbus.cloudsim.examples;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;

import java.util.*;

public class VmScheduleHelperComparison {

    public static void main(String[] args) {
        try {
            Log.printLine("Starting VM Scheduling Comparison...");

            // Initialize CloudSim
            int numUsers = 1;
            Calendar calendar = Calendar.getInstance();
            boolean traceFlag = false;
            CloudSim.init(numUsers, calendar, traceFlag);

            // Run both simulations
            Log.printLine("\n--- TimeShared Scheduling ---");
            runSimulation("TimeShared");

            Log.printLine("\n--- SpaceShared Scheduling ---");
            runSimulation("SpaceShared");

            Log.printLine("Finished all simulations.");

        } catch (Exception e) {
            e.printStackTrace();
            Log.printLine("An error occurred.");
        }
    }

    public static void runSimulation(String schedulingPolicy) throws Exception {

        // Create Datacenter
        Datacenter datacenter = createDatacenter("Datacenter_" + schedulingPolicy, schedulingPolicy);

        // Create Broker
        DatacenterBroker broker = new DatacenterBroker("Broker_" + schedulingPolicy);

        int brokerId = broker.getId();

        // Create VMs
        List<Vm> vmList = new ArrayList<>();
        for (int i = 0; i < 2; i++) {
            Vm vm = new Vm(i, brokerId, 1000, 1, 1024, 10000, 1000, "Xen", new CloudletSchedulerTimeShared());
            vmList.add(vm);
        }
        broker.submitVmList(vmList);

        // Create Cloudlets
        List<Cloudlet> cloudletList = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            UtilizationModel utilizationModel = new UtilizationModelFull();
            Cloudlet cloudlet = new Cloudlet(i, 40000, 1, 300, 300, utilizationModel, utilizationModel, utilizationModel);
            cloudlet.setUserId(brokerId);
            cloudlet.setVmId(i % 2); // Assign alternately to VM 0 and 1
            cloudletList.add(cloudlet);
        }
        broker.submitCloudletList(cloudletList);

        // Start Simulation
        CloudSim.startSimulation();

        List<Cloudlet> newList = broker.getCloudletReceivedList();

        CloudSim.stopSimulation();

        printCloudletList(newList);
    }

    private static Datacenter createDatacenter(String name, String schedulingPolicy) throws Exception {

        List<Host> hostList = new ArrayList<>();

        int hostId = 0;
        int ram = 2048;
        long storage = 1000000;
        int bw = 10000;

        List<Pe> peList = new ArrayList<>();
        peList.add(new Pe(0, new PeProvisionerSimple(1000))); // 1 core

        VmScheduler scheduler = schedulingPolicy.equals("TimeShared") ?
                new VmSchedulerTimeShared(peList) :
                new VmSchedulerSpaceShared(peList);

        Host host = new Host(hostId, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw),
                storage, peList, scheduler);

        hostList.add(host);

        String arch = "x86"; String os = "Linux"; String vmm = "Xen";
        double timeZone = 10.0; double costPerSec = 3.0; double costPerMem = 0.05;
        double costPerStorage = 0.001; double costPerBw = 0.0;

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                arch, os, vmm, hostList, timeZone, costPerSec, costPerMem, costPerStorage, costPerBw);

        return new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), new LinkedList<>(), 0);
    }

    private static void printCloudletList(List<Cloudlet> list) {
        String indent = "    ";
        Log.printLine();
        Log.printLine("========== OUTPUT ==========");
        Log.printLine("Cloudlet ID" + indent + "STATUS" + indent +
                "Data center ID" + indent + "VM ID" + indent +
                "Time" + indent + "Start Time" + indent + "Finish Time");

        for (Cloudlet cloudlet : list) {
            Log.print(cloudlet.getCloudletId() + indent);

            if (cloudlet.getStatus() == Cloudlet.SUCCESS) {
                Log.print("SUCCESS");

                Log.printLine(indent + cloudlet.getResourceId() + indent + cloudlet.getVmId() +
                        indent + cloudlet.getActualCPUTime() + indent +
                        cloudlet.getExecStartTime() + indent + cloudlet.getFinishTime());
            }
        }
    }
}
